#!/bin/bash

scriptdir="$(dirname $(which $0))"

. ${scriptdir}/server.conf

: ${basedir:=$(pwd)}
: ${download:?}
: ${sampleset:=sampleset}
: ${working:=working}
: ${releasedir:?}
: ${storgrp:?}
: ${parallel:=16}
: ${contimeout:=300}
: ${retries:=10}
: ${iotimeout:=300}

if [[ $(realpath $scriptdir) != $(realpath $basedir) ]]; then
	echo "$scriptdir vs $basedir"
fi

cd ${basedir}

umask 0002

statusdir="${basedir}/status"
mkdir -m 0770 -p ${statusdir}

baseconda=$HOME/
timeoutforeground=
#--foreground

lastmonth=$(date '+%Y%m' --date='-1 month')
thismonth=$(date '+%Y%m')

#
# Input validator
#
validateBatchDate() {
	if [[ "$1" =~ ^(20[0-9][0-9][0-1][0-9][0-3][0-9])$ ]]; then
		return;
	else
		echo "bad batchdate ${1}"
		exit 1;
	fi
}

callpushrsync() {
	. server.conf

	arglist=( )
	if (( ${#@} )); then
		arglist=( "${@/#/${basedir}/${sampleset}/}" )
	else
		#arglist=( "${basedir}/${sampleset}/" )
		echo "rsync job didn't receive list"
		exit 1;
	fi
	exec	timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
		rsync	--timeout=${iotimeout}	\
		--password-file ~/rsync.pass.euler	\
		-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
		-izrltH --fuzzy --fuzzy --inplace	\
		-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
		-g --chown=:'bsse-covid19-pangolin-euler'	\
		"${arglist[@]}"	\
		belfry@euler.ethz.ch::${sampleset}/
}
export -f callpushrsync


callpullrsync() {
	. server.conf

	arglist=( )
	if (( ${#@} )); then
		arglist=( "${@/#/belfry@euler.ethz.ch::${working}/samples/}" )
	else
		#arglist=( "belfry@euler.ethz.ch::${working}/samples/" )
		echo "rsync job didn't receive list"
		exit 1;
	fi
	exec	timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
		rsync	--timeout=${iotimeout}	\
		--password-file ~/rsync.pass.euler	\
		-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
		-izrltH --fuzzy --fuzzy --inplace	\
		-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
		-g --chown=:"${storgrp}"	\
		--link-dest=${basedir}/${sampleset}/	\
		"${arglist[@]}"	\
		--exclude='raw_data/*_R[12].fastq.gz'	\
		--exclude='extracted_data/R[12]_fastqc.html'	\
		--exclude='variants/SNVs/REGION_*/reads.fas'	\
		--exclude='variants/SNVs/REGION_*/w-*.reads.fas'	\
		--exclude='variants/SNVs/REGION_*/raw_reads/w-*.reads.fas.gz'	\
		${basedir}/${working}/samples/
}
export -f callpullrsync


callpullrsync_noshorah() {
	. server.conf

	arglist=( )
	if (( ${#@} )); then
		arglist=( "${@/#/belfry@euler.ethz.ch::${working}/samples/}" )
	else
		#arglist=( "belfry@euler.ethz.ch::${working}/samples/" )
		echo "rsync job didn't receive list"
		exit 1;
	fi
	exec	timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
		rsync	--timeout=${iotimeout}	\
		--password-file ~/rsync.pass.euler	\
		-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
		-izrltH --fuzzy --fuzzy --inplace	\
		-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
		-g --chown=:"${storgrp}"	\
		--link-dest=${basedir}/${sampleset}/	\
		"${arglist[@]}"	\
		--exclude='raw_data/*_R[12].fastq.gz'	\
		--exclude='extracted_data/R[12]_fastqc.html'	\
		--exclude='variants/'	\
		--exclude='visualization/'	\
		${basedir}/${working}/samples/
}
export -f callpullrsync_noshorah


case "$1" in
	syncopenbis)
		echo "Sync GFB - OpenBIS..."
		# Total: 10654 directories, 11687 files, 0 symlink
		# New: 605 files, 0 symlinks
		# 7674153291 bytes transferred
		. $baseconda/miniconda3/bin/activate ""
		if [[ "${2}" = "--recent" ]]; then
			param=( "${lastmonth}*" "${thismonth}*" )
			echo "syncing recent: ${param[*]}"
		else
			param=( )
		fi
		syncoutput="$(/usr/bin/time ${scriptdir}/sync_sftp "${param[@]}"|tee /dev/stderr)"
		if [[ "$syncoutput" =~ Total:\ +([[:digit:]]+)\ +directories,\ +([[:digit:]]+)\ +files,.*?New:\ +([[:digit:]]+)\ +files, ]]; then
			echo "Newfiles downloaded"
			echo -e "${BASH_REMATCH[2]}\n${BASH_REMATCH[1]}" > ${statusdir}/syncopenbis_last
			flock -x -o ${statusdir}/syncopenbis_last -c "sleep 1"
			echo "${BASH_REMATCH[3]}" > ${statusdir}/syncopenbis_new
		else
			echo "Same old shit"
			touch ${statusdir}/syncopenbis_last
		fi 2>&1
		conda deactivate
	;;
	syncfgcz)
		echo "Sync FGCZ - bfabric"
		. $baseconda/miniconda3/bin/activate ""
		if [[ "${2}" = "--recent" ]]; then
		 :
# 			param=( "${lastmonth}*" "${thismonth}*" )
# 			echo "syncing recent: ${param[*]}"
		else
			param=( )
		fi
		syncoutput="$(/usr/bin/time ${scriptdir}/sync_sftp -c fgcz.conf "${param[@]}"|tee /dev/stderr)"
		if [[ "$syncoutput" =~ Total:\ +([[:digit:]]+)\ +directories,\ +([[:digit:]]+)\ +files,.*?New:\ +([[:digit:]]+)\ +files, ]]; then
			echo "Newfiles downloaded"
			echo -e "${BASH_REMATCH[2]}\n${BASH_REMATCH[1]}" > ${statusdir}/syncopenbis_last
			flock -x -o ${statusdir}/syncopenbis_last -c "sleep 1"
			echo "${BASH_REMATCH[3]}" > ${statusdir}/syncfgcz_new
		else
			echo "Same old shit"
			touch ${statusdir}/syncfgcz_last
		fi 2>&1
		conda deactivate
	;;
	sortsamples)
		. $baseconda/miniconda3/bin/activate pybis
		cd $basedir
		summary=""
		recent=""
		while [[ -n $2 ]]; do
			case "$2" in
				--summary)
					summary='--summary'
				;;
				--recent)
					recent="--recent=${lastmonth}"
				;;
				*)
					echo "Unkown parameter ${2}" > /dev/stderr
					exit 2
				;;
			esac
			shift
		done
		fail=0
		${scriptdir}/sort_samples_pybis ${summary} ${recent} && bash ${basedir}/${sampleset}/movedatafiles.sh || fail=1
		${scriptdir}/sort_samples_bfabric_tsv -c fgcz.conf && bash ${basedir}/${sampleset}/movedatafiles.sh || fail=1
		(( fail == 0 )) &&  touch ${statusdir}/sortsamples_success || touch ${statusdir}/sortsamples_fail
		conda deactivate
	;;
	fixopenbisrights)
		validateBatchDate "$2"

		dir=( ${basedir}/${download}/${2}* )
		if (( ${#dir[@]} > 1 )); then
			echo "${#dir[@]} directories"
			echo 'mode directories'
			find "${dir[@]}" -type d -print0 | xargs -0 chmod u+rwx,g+rwXs,o-rwx
			echo 'mode files'
			find "${dir[@]}" -type f -print0 | xargs -0 chmod 0660
			#echo 'group'
			#chgrp -R "${storgrp}" "${dir[@]}"
		fi
	;;
	pushsampleset)
		if [[ "${2}" = "--recent" ]]; then
			sheets=( ${basedir}/${sampleset}/samples.${lastmonth}*.tsv ${basedir}/${sampleset}/samples.${thismonth}*.tsv )
			# BUG: will generate non-globed pattern if months are missing
			echo "pushing recent: ${param[*]##/}"
		else
			sheets=( ${basedir}/${sampleset}/samples.*.tsv )
		fi
		err=0
		timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
			rsync	--timeout=${iotimeout}	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
			-izrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
			-g --chown=:'bsse-covid19-pangolin-euler'	\
			${basedir}/${sampleset}/samples.*.tsv	\
			belfry@euler.ethz.ch::${sampleset}/ || (( ++err ))
		cut -s --fields=1 "${sheets[@]}"|sort -u|	\
			gawk -v P=$(( parallel * 4 ))  '{i=(NR-1);b=i%P;o[b]=(o[b] " \"" $1 "\"")};END{for(i=0;i<P;i++){printf("%s\0",o[i])}}'|	\
			xargs -0 -P $parallel -I '{@LIST@}' --	\
				bash -c "callpushrsync {@LIST@} " || (( ++err ))
		if (( err )); then
			echo "Error: ${err} rsync job(s) failed"
			touch ${statusdir}/pushsampleset_fail
		else
			touch ${statusdir}/pushsampleset_success
		fi
	;;
	listsamples)
		timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
			rsync	--timeout=${iotimeout}	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
			-iPzrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx	\
			-g --chown=:"${storgrp}"	\
			--list-only	\
			belfry@euler.ethz.ch::${working}/samples/
	;;
	pullsamples_noshorah)
		# fetch remote sheets
		mkdir -p /tmp/belfrysheets/
		if [[ "${2}" = "--recent" ]]; then
			sheets=( "belfry@euler.ethz.ch::${sampleset}/samples.${lastmonth}*.tsv" "belfry@euler.ethz.ch::${sampleset}/samples.${thismonth}*.tsv" )
		else
			sheets=( "belfry@euler.ethz.ch::${sampleset}/samples.*.tsv" )
		fi
		rsync	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*}"	\
			-izrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
			-g --chown=:'bsse-covid19-pangolin-euler'	\
			"${sheets[@]}"	\
			/tmp/belfrysheets/
		if [[ "${2}" = "--recent" ]]; then
			sheets=( /tmp/belfrysheets/samples.${lastmonth}*.tsv /tmp/belfrysheets/samples.${thismonth}*.tsv )
			# BUG: will generate non-globed pattern if months are missing
			echo "pulling recent: ${param[*]##/}"
		else
			sheets=( /tmp/belfrysheets/samples.*.tsv )
		fi
		err=0
		timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
			rsync	--timeout=${iotimeout}	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
			-izrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
			-g --chown=:"${storgrp}"	\
			--relative	\
			belfry@euler.ethz.ch::${working}/./{qa.csv,variants/}	\
			${basedir}/${working}/ || (( ++err ))
		echo "samples:"
		cut -s --fields=1 "${sheets[@]}"|sort -u|	\
			gawk -v P=$(( parallel * 4 )) '{i=(NR-1);b=i%P;o[b]=(o[b] " \"" $1 "\"")};END{for(i=0;i<P;i++){printf("%s\0",o[i])}}'|	\
			xargs -0 -P $parallel -I '{@LIST@}' --	\
				bash -c "callpullrsync_noshorah {@LIST@} " || (( ++err ))
		if (( err )); then
			echo "Error: ${err} rsync job(s) failed"
			touch ${statusdir}/pullsamples_noshorah_fail
		else
			touch ${statusdir}/pullsamples_noshorah_success
		fi
	;;
	pullsamples)
		# fetch remote sheets
		mkdir -p /tmp/belfrysheets/
		if [[ "${2}" = "--recent" ]]; then
			sheets=( "belfry@euler.ethz.ch::${sampleset}/samples.${lastmonth}*.tsv" "belfry@euler.ethz.ch::${sampleset}/samples.${thismonth}*.tsv" )
		else
			sheets=( "belfry@euler.ethz.ch::${sampleset}/samples.*.tsv" )
		fi
		rsync	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*}"	\
			-izrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
			-g --chown=:'bsse-covid19-pangolin-euler'	\
			"${sheets[@]}"	\
			/tmp/belfrysheets/
		if [[ "${2}" = "--recent" ]]; then
			sheets=( /tmp/belfrysheets/samples.${lastmonth}*.tsv /tmp/belfrysheets/samples.${thismonth}*.tsv )
			# BUG: will generate non-globed pattern if months are missing
			echo "pulling recent: ${param[*]##/}"
		else
			sheets=( /tmp/belfrysheets/samples.*.tsv )
		fi
		err=0
		timeout ${timeoutforeground} --signal=INT --kill-after=5 $((rsynctimeout+contimeout+5))	\
			rsync	--timeout=${iotimeout}	\
			--password-file ~/rsync.pass.euler	\
			-e "ssh -i ${HOME}/.ssh/id_ed25519_belfry -l ${USER%%@*} -oConnectTimeout=${contimeout}"	\
			-izrltH --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx	\
			-g --chown=:"${storgrp}"	\
			--relative	\
			belfry@euler.ethz.ch::${working}/./{qa.csv,variants/}	\
			${basedir}/${working}/ || (( ++err ))
		echo "samples:"
		cut -s --fields=1 "${sheets[@]}"|sort -u|	\
			gawk -v P=$(( parallel * 4 )) '{i=(NR-1);b=i%P;o[b]=(o[b] " \"" $1 "\"")};END{for(i=0;i<P;i++){printf("%s\0",o[i])}}'|	\
			xargs -0 -P $parallel -I '{@LIST@}' --	\
				bash -c "callpullrsync {@LIST@} " || (( ++err ))
		if (( err )); then
			echo "Error: ${err} rsync job(s) failed"
			touch ${statusdir}/pullsamples_fail
		else
			touch ${statusdir}/pullsamples_success
		fi
	;;
	qa_report)
		. $baseconda/miniconda3/bin/activate qa_report
		cd ${basedir}/${working}/
		jupyter nbconvert --ExecutePreprocessor.timeout=180 --execute --no-input qa_report.ipynb && touch ${statusdir}/qa_report_success || touch ${statusdir}/qa_report_fail 
		conda deactivate
	;;
	pushseq)
		rsync -irltH  --fuzzy --fuzzy --inplace	\
			-p --chmod=Dg+s,ug+rw,o-rwx,Fa-x	\
			-g --chown=:"${storgrp}"	\
			--relative	\
			${basedir}/${sampleset}/./batch.*.yaml	\
			${basedir}/${working}/./{qa*.html,qa*.csv,samples/{[[:digit:]]*_[[:digit:]]*_[[:upper:]][[:digit:]]*,[[:upper:]][[:digit:]]_[[:digit:]]*}/[[:digit:]]*_*/references/}	\
			--exclude '*.matcher'	\
			--exclude '*.log'	\
			--exclude '*.json'	\
			${releasedir} && touch ${statusdir}/pushseq_success || touch ${statusdir}/pushseq_fail
	;;
	gitaddseq)
		. $baseconda/miniconda3/bin/activate ""
		cd ${releasedir}
		git add qa* samples/*/*/references/*.fasta
		conda deactivate
	;;
	*)
		echo "Unkown sub-command ${1}" > /dev/stderr
		exit 2
	;;
esac
